#!/usr/bin/env bash
# =~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
set -e

WORKING_DIR=$(pwd)
NOW=$(date -u +%Y%m%d%H%M)

# =~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=

usage() {
  cat <<EOF
$1
  Usage:
    Options:
      --debug               Turn on fortify debug logging
                            (NOTE: This does not turn on debug ouput for the script itself, just fortify)
      -h|--help             Usage Information
      -b                    The build name for the scan
      --exclude-dirs        Semicolon (;) separated list of directories to exclude from the scan
      --exclude-modules     Semicolon (;) separated list of modules to exclude from the scan
      -v|--verbose          Turn on verbose scan output
    Example:
      $0 -b fortify2020 --exclude-dirs /src/test;/target --exclude-modules moduleOne;moduleTwo

EOF
exit 1
}
# =~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=

main() {
  ARGS=$(getopt -n $(basename ${0}) \
      -l "debug,help,exclude-dirs:,exclude-modules:,verbose" \
      -o "hvb:" -- "$@")
  [ $? != 0 ] && usage
  eval set -- "$ARGS"
  while true
  do
    case "$1" in
      --debug) DEBUG=true;;
      -v|--verbose) VERBOSE=true;;
      -h|--help) usage "I cant even with this...";;
      -b) BUILD_ID="$2";;
      --exclude-dirs) EXCLUDES=($(echo $2 | tr ';' ' '));;
      --exclude-modules) EXMODULES=($(echo $2 | tr ';' ' '));;
      --) shift;break;;
    esac
    shift;
  done

  [ ! -f pom.xml ] && echo "Wait... this isnt a maven project..." && exit 1

  [ -z "$BUILD_ID" ] && usage "Missing required parameter: -b"

  FILENAME="$BUILD_ID-fortify-$NOW"

  updateFortifyRulepacks

  cleanFortifyBuild

  packageProject

  EXCLUSIONS=()
  translateFiles

  scanFortifyBuild

}

# =~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=

exclude() {
  echo "Excluding Directory: $1"
  EXCLUSIONS+=("-exclude $1")
}

updateFortifyRulepacks() {
  echo "Updating Rulepacks..."
  if ! fortifyupdate; then
    echo "Couldnt update rulepacks... Continuing..."
  fi
}

cleanFortifyBuild() {
  echo -e "\nCleaning Previous Build Artifacts..."
  sourceanalyzer -b $BUILD_ID -clean
}

packageProject() {
  echo -e "\nPackaging Artifacts..."

  local projects=()
  for module in ${EXMODULES[@]}; do
    projects+=("-pl !$module")
  done

  mvn clean package \
    -f $WORKING_DIR/pom.xml \
    ${projects[@]} \
    -DskipTests \
    -Djacoco.skip \
    -Dcheckstyle.skip \
    -Dspotbugs.skip
}

translateFiles() {
  echo -e "\nTranslating Files..."

  local classpath=()

  PROJECT_MODULES=($(cat pom.xml | grep '<module>' | sed 's/.*module>\(.*\)<.*/\1/'))
  echo -e "\nFound Project Modules: ${PROJECT_MODULES[@]}"
  echo "Excluding Modules: ${EXMODULES[@]}"

  [ -d '.idea' ] && exclude "$WORKING_DIR/.idea"
  [ -d 'target' ] && exclude "$WORKING_DIR/target"

  for module in ${EXMODULES[@]}; do
    exclude "$WORKING_DIR/$module"
    PROJECT_MODULES=(${PROJECT_MODULES[@]/$module})
  done

  for module in ${PROJECT_MODULES[@]}; do
    for ex in ${EXCLUDES[@]}; do
      [[ "$ex" =~ ^/.* ]] && ex=${ex:1}
      exclude "$WORKING_DIR/$module/$ex"
    done
    classpath+=("-cp $WORKING_DIR/$module/target")
  done

  if [ "${DEBUG:-false}" == "true" ]; then
    local logfile="$FILENAME-build.log"
    echo -e "\nSaving logfile: $logfile"
    local debugOp="-debug -logfile $logfile"
  fi

  sourceanalyzer -b $BUILD_ID \
    -source 12 \
    ${debugOp:-} \
    ${classpath[@]} \
    ${EXCLUSIONS[@]} \
    $WORKING_DIR
}

scanFortifyBuild() {
  local fpr="$FILENAME.fpr"
  echo -e "\nStarting Scan..."
  echo "Saving file ($fpr)..."

  if [ "${DEBUG:-false}" == "true" ]; then
    local logfile="$FILENAME-scan.log"
    echo "Saving logfile: $logfile"
    local debugOp="-debug -logfile $logfile"
  fi

  sourceanalyzer -b $BUILD_ID \
    ${debugOp:-} \
    -scan \
    -f $fpr
}

# =~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=

main $@
