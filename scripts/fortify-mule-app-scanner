#!/usr/bin/env bash

set -e

WORKING_DIR=$(pwd)
NOW=$(date -u +%Y%m%d%H%M)

usage() {
  cat <<EOF
$1
  Usage:
    Options:
      --debug       Turns on debug mode for the fortify scans and outputs logs to files
      -h|--help     Usage Information
      -b            The build name for the scan
      --exclude     Semicolon (;) separated list of exclusions
      --filter      Filter for module selection in current working dir (ex. gal)
      --modules     An explicit semicolon (;) separated list of modules to scan

    Example:
      $0 -b fortify2020 --modules moduleOne;moduleTwo --exclude src/test;target

EOF
exit 1
}

# ==================================================

ARGS=$(getopt -n $(basename ${0}) \
    -l "help,debug,exclude:,filter:,modules:" \
    -o "hb:" -- "$@")
[ $? != 0 ] && usage
eval set -- "$ARGS"
while true
do
  case "$1" in
    --debug) DEBUG=true;;
    -h|--help) usage "I cant even with this...";;
    -b) BUILD_ID="$2";;
    --exclude) EXCLUDES=($(echo $2 | tr ';' ' '));;
    --filter) MODULES=($(find $WORKING_DIR -maxdepth 1 -type d -name "$2*"));;
    --modules) MODULES=(); for i in $(echo $2 | tr ';' ' '); do MODULES+=("$WORKING_DIR/$i"); done;;
    --) shift;break;;
  esac
  shift;
done

# ==================================================

FILENAME="$BUILD_ID-fortify-$NOW"
FPR="$FILENAME.fpr"

[ -z "$BUILD_ID" ] && usage "Missing required parameter: -b"
[ -z "$MODULES" ] && usage "Missing required parameter: --modules"

echo "Updating Rulepacks..."
if ! fortifyupdate; then
  echo "Couldnt update rulepacks... Continuing..."
fi

echo -e "\nCleaning Previous Build Artifacts..."
sourceanalyzer -b $BUILD_ID -clean

echo -e "\nTranslating Files..."
echo "Modules: ${MODULES[@]}"

EXCLUSIONS=()

for ex in ${EXCLUDES[@]}; do
  [[ "$ex" =~ ^/.* ]] && ex=${ex:1}
  for module in ${MODULES[@]}; do
    exDir="$module/$ex"
    echo "Excluding: $exDir"
    EXCLUSIONS+=("-exclude $exDir")
  done
done

if [ "${DEBUG:-false}" == "true" ]; then
  logfile="$FILENAME-build.log"
  echo "Saving logfile: $logfile"
  debugOp="-debug -logfile $logfile"
fi

sourceanalyzer -b $BUILD_ID \
  -source 1.8 \
  ${debugOp:-} \
  ${EXCLUSIONS[@]} \
  ${MODULES[@]}


echo -e "\nStarting Scan..."

if [ "${DEBUG:-false}" == "true" ]; then
  logfile="$FILENAME-scan.log"
  echo "Saving logfile: $logfile"
  debugOp="-debug -logfile $logfile"
fi

echo "Saving file ($FPR)..."
sourceanalyzer -b $BUILD_ID \
  ${debugOp:-} \
  -scan \
  -f $FPR
