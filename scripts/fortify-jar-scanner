#!/usr/bin/env bash

set -e

[ ! -f pom.xml ] && echo "Wait... this isnt a maven project..." && exit 1

WORKING_DIR=$(pwd)
NOW=$(date -u +%Y%m%d%H%M)

usage() {
  cat <<EOF
$1
  Usage:
    Options:
      -h|--help     Usage Information
      -b            The build name for the scan
      --exclude     Semicolon (;) separated list of exclusions
      --filter      Filter for modules in current working dir (ex. gal)
      --modules     An explicit semicolon (;) separated list of modules to scan

    Example:
      $0 -b fortify2020 --modules moduleOne;moduleTwo

EOF
exit 1
}

# ==================================================

ARGS=$(getopt -n $(basename ${0}) \
    -l "help,exclude:,module-excludes:" \
    -o "hb:" -- "$@")
[ $? != 0 ] && usage
eval set -- "$ARGS"
while true
do
  case "$1" in
    -h|--help) usage "I cant even with this...";;
    -b) BUILD_ID="$2";;
    --exclude) EXCLUDES=($(echo $2 | tr ';' ' '));;
    --module-excludes) EXMODULES=($(echo $2 | tr ';' ' '));;
    --) shift;break;;
  esac
  shift;
done

# ==================================================

exclude() {
  echo "Exclude: $1"
  EXCLUSIONS+=("-exclude $1")
}

# ==================================================

[ -z "$BUILD_ID" ] && usage "Missing required parameter: -b"

FILENAME="$BUILD_ID-fortify-$NOW"
FPR="$FILENAME.fpr"


echo "Updating Rulepacks..."
if ! fortifyupdate; then
  echo "Couldnt update rulepacks... Continuing..."
fi


echo -e "\nCleaning Previous Build Artifacts..."
sourceanalyzer -b $BUILD_ID -clean

echo -e "\nPackaging Artifacts..."
mvn clean package \
  -DskipTests \
  -Djacoco.skip \
  -Dcheckstyle.skip \
  -Dspotbugs.skip


echo -e "\nTranslating Files..."

EXCLUSIONS=()

PROJECT_MODULES=($(cat pom.xml | grep '<module>' | sed 's/.*module>\(.*\)<.*/\1/'))
echo -e "\nFound Project Modules: ${PROJECT_MODULES[@]}"

[ -d '.idea' ] && exclude "$WORKING_DIR/.idea"
[ -d 'target' ] && exclude "$WORKING_DIR/target"

for module in ${EXMODULES[@]}; do
  exclude "$WORKING_DIR/$module"
  PROJECT_MODULES=(${PROJECT_MODULES[@]/$module})
done

for ex in ${EXCLUDES[@]}; do
  [[ "$ex" =~ ^/.* ]] && ex=${ex:1}  
  for module in ${PROJECT_MODULES[@]}; do      
    exclude "$WORKING_DIR/$module/$ex"
  done
done

CLASSPATH=()

for module in ${PROJECT_MODULES[@]}; do
  CLASSPATH+=("-cp $WORKING_DIR/$module/target") 
done

sourceanalyzer -b $BUILD_ID \
  -source 12 \
  -debug \
  -logfile "$FILENAME-build.log" \
  ${CLASSPATH[@]} \
  ${EXCLUSIONS[@]} \
  $WORKING_DIR


echo -e "\nStarting Scan..."
echo "Saving file ($FPR)..."
sourceanalyzer -b $BUILD_ID \
  -debug \
  -logfile "$FILENAME-scan.log" \
  -scan \
  -f $FPR

echo "Saving logs to $FILENAME-*.log..."
